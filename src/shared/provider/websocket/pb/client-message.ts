/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: shared/provider/websocket/types/client-message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

export class ClientMessage extends pb_1.Message {
	#one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7]];
	constructor(
		data?:
			| any[]
			| ({} & (
					| {
							roomJoinRequest?: RoomJoinRequest;
							roomLeaveRequest?: never;
							gameStartRequest?: never;
							gameEndRequest?: never;
							quizAnswer?: never;
							turnEndNotification?: never;
							otherMessage?: never;
					  }
					| {
							roomJoinRequest?: never;
							roomLeaveRequest?: RoomLeaveRequest;
							gameStartRequest?: never;
							gameEndRequest?: never;
							quizAnswer?: never;
							turnEndNotification?: never;
							otherMessage?: never;
					  }
					| {
							roomJoinRequest?: never;
							roomLeaveRequest?: never;
							gameStartRequest?: GameStartRequest;
							gameEndRequest?: never;
							quizAnswer?: never;
							turnEndNotification?: never;
							otherMessage?: never;
					  }
					| {
							roomJoinRequest?: never;
							roomLeaveRequest?: never;
							gameStartRequest?: never;
							gameEndRequest?: GameEndRequest;
							quizAnswer?: never;
							turnEndNotification?: never;
							otherMessage?: never;
					  }
					| {
							roomJoinRequest?: never;
							roomLeaveRequest?: never;
							gameStartRequest?: never;
							gameEndRequest?: never;
							quizAnswer?: QuizAnswer;
							turnEndNotification?: never;
							otherMessage?: never;
					  }
					| {
							roomJoinRequest?: never;
							roomLeaveRequest?: never;
							gameStartRequest?: never;
							gameEndRequest?: never;
							quizAnswer?: never;
							turnEndNotification?: TurnEndNotification;
							otherMessage?: never;
					  }
					| {
							roomJoinRequest?: never;
							roomLeaveRequest?: never;
							gameStartRequest?: never;
							gameEndRequest?: never;
							quizAnswer?: never;
							turnEndNotification?: never;
							otherMessage?: OtherMessage;
					  }
			  )),
	) {
		super();
		pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
		if (!Array.isArray(data) && typeof data == "object") {
			if ("roomJoinRequest" in data && data.roomJoinRequest != undefined) {
				this.roomJoinRequest = data.roomJoinRequest;
			}
			if ("roomLeaveRequest" in data && data.roomLeaveRequest != undefined) {
				this.roomLeaveRequest = data.roomLeaveRequest;
			}
			if ("gameStartRequest" in data && data.gameStartRequest != undefined) {
				this.gameStartRequest = data.gameStartRequest;
			}
			if ("gameEndRequest" in data && data.gameEndRequest != undefined) {
				this.gameEndRequest = data.gameEndRequest;
			}
			if ("quizAnswer" in data && data.quizAnswer != undefined) {
				this.quizAnswer = data.quizAnswer;
			}
			if ("turnEndNotification" in data && data.turnEndNotification != undefined) {
				this.turnEndNotification = data.turnEndNotification;
			}
			if ("otherMessage" in data && data.otherMessage != undefined) {
				this.otherMessage = data.otherMessage;
			}
		}
	}
	get roomJoinRequest() {
		return pb_1.Message.getWrapperField(this, RoomJoinRequest, 1) as RoomJoinRequest;
	}
	set roomJoinRequest(value: RoomJoinRequest) {
		pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
	}
	get has_roomJoinRequest() {
		return pb_1.Message.getField(this, 1) != null;
	}
	get roomLeaveRequest() {
		return pb_1.Message.getWrapperField(this, RoomLeaveRequest, 2) as RoomLeaveRequest;
	}
	set roomLeaveRequest(value: RoomLeaveRequest) {
		pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
	}
	get has_roomLeaveRequest() {
		return pb_1.Message.getField(this, 2) != null;
	}
	get gameStartRequest() {
		return pb_1.Message.getWrapperField(this, GameStartRequest, 3) as GameStartRequest;
	}
	set gameStartRequest(value: GameStartRequest) {
		pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
	}
	get has_gameStartRequest() {
		return pb_1.Message.getField(this, 3) != null;
	}
	get gameEndRequest() {
		return pb_1.Message.getWrapperField(this, GameEndRequest, 4) as GameEndRequest;
	}
	set gameEndRequest(value: GameEndRequest) {
		pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
	}
	get has_gameEndRequest() {
		return pb_1.Message.getField(this, 4) != null;
	}
	get quizAnswer() {
		return pb_1.Message.getWrapperField(this, QuizAnswer, 5) as QuizAnswer;
	}
	set quizAnswer(value: QuizAnswer) {
		pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
	}
	get has_quizAnswer() {
		return pb_1.Message.getField(this, 5) != null;
	}
	get turnEndNotification() {
		return pb_1.Message.getWrapperField(this, TurnEndNotification, 6) as TurnEndNotification;
	}
	set turnEndNotification(value: TurnEndNotification) {
		pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
	}
	get has_turnEndNotification() {
		return pb_1.Message.getField(this, 6) != null;
	}
	get otherMessage() {
		return pb_1.Message.getWrapperField(this, OtherMessage, 7) as OtherMessage;
	}
	set otherMessage(value: OtherMessage) {
		pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
	}
	get has_otherMessage() {
		return pb_1.Message.getField(this, 7) != null;
	}
	get type() {
		const cases: {
			[index: number]:
				| "none"
				| "roomJoinRequest"
				| "roomLeaveRequest"
				| "gameStartRequest"
				| "gameEndRequest"
				| "quizAnswer"
				| "turnEndNotification"
				| "otherMessage";
		} = {
			0: "none",
			1: "roomJoinRequest",
			2: "roomLeaveRequest",
			3: "gameStartRequest",
			4: "gameEndRequest",
			5: "quizAnswer",
			6: "turnEndNotification",
			7: "otherMessage",
		};
		return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7])];
	}
	static fromObject(data: {
		roomJoinRequest?: ReturnType<typeof RoomJoinRequest.prototype.toObject>;
		roomLeaveRequest?: ReturnType<typeof RoomLeaveRequest.prototype.toObject>;
		gameStartRequest?: ReturnType<typeof GameStartRequest.prototype.toObject>;
		gameEndRequest?: ReturnType<typeof GameEndRequest.prototype.toObject>;
		quizAnswer?: ReturnType<typeof QuizAnswer.prototype.toObject>;
		turnEndNotification?: ReturnType<typeof TurnEndNotification.prototype.toObject>;
		otherMessage?: ReturnType<typeof OtherMessage.prototype.toObject>;
	}): ClientMessage {
		const message = new ClientMessage({});
		if (data.roomJoinRequest != null) {
			message.roomJoinRequest = RoomJoinRequest.fromObject(data.roomJoinRequest);
		}
		if (data.roomLeaveRequest != null) {
			message.roomLeaveRequest = RoomLeaveRequest.fromObject(data.roomLeaveRequest);
		}
		if (data.gameStartRequest != null) {
			message.gameStartRequest = GameStartRequest.fromObject(data.gameStartRequest);
		}
		if (data.gameEndRequest != null) {
			message.gameEndRequest = GameEndRequest.fromObject(data.gameEndRequest);
		}
		if (data.quizAnswer != null) {
			message.quizAnswer = QuizAnswer.fromObject(data.quizAnswer);
		}
		if (data.turnEndNotification != null) {
			message.turnEndNotification = TurnEndNotification.fromObject(data.turnEndNotification);
		}
		if (data.otherMessage != null) {
			message.otherMessage = OtherMessage.fromObject(data.otherMessage);
		}
		return message;
	}
	toObject() {
		const data: {
			roomJoinRequest?: ReturnType<typeof RoomJoinRequest.prototype.toObject>;
			roomLeaveRequest?: ReturnType<typeof RoomLeaveRequest.prototype.toObject>;
			gameStartRequest?: ReturnType<typeof GameStartRequest.prototype.toObject>;
			gameEndRequest?: ReturnType<typeof GameEndRequest.prototype.toObject>;
			quizAnswer?: ReturnType<typeof QuizAnswer.prototype.toObject>;
			turnEndNotification?: ReturnType<typeof TurnEndNotification.prototype.toObject>;
			otherMessage?: ReturnType<typeof OtherMessage.prototype.toObject>;
		} = {};
		if (this.roomJoinRequest != null) {
			data.roomJoinRequest = this.roomJoinRequest.toObject();
		}
		if (this.roomLeaveRequest != null) {
			data.roomLeaveRequest = this.roomLeaveRequest.toObject();
		}
		if (this.gameStartRequest != null) {
			data.gameStartRequest = this.gameStartRequest.toObject();
		}
		if (this.gameEndRequest != null) {
			data.gameEndRequest = this.gameEndRequest.toObject();
		}
		if (this.quizAnswer != null) {
			data.quizAnswer = this.quizAnswer.toObject();
		}
		if (this.turnEndNotification != null) {
			data.turnEndNotification = this.turnEndNotification.toObject();
		}
		if (this.otherMessage != null) {
			data.otherMessage = this.otherMessage.toObject();
		}
		return data;
	}
	serialize(): Uint8Array;
	serialize(w: pb_1.BinaryWriter): void;
	serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
		const writer = w || new pb_1.BinaryWriter();
		if (this.has_roomJoinRequest)
			writer.writeMessage(1, this.roomJoinRequest, () => this.roomJoinRequest.serialize(writer));
		if (this.has_roomLeaveRequest)
			writer.writeMessage(2, this.roomLeaveRequest, () => this.roomLeaveRequest.serialize(writer));
		if (this.has_gameStartRequest)
			writer.writeMessage(3, this.gameStartRequest, () => this.gameStartRequest.serialize(writer));
		if (this.has_gameEndRequest)
			writer.writeMessage(4, this.gameEndRequest, () => this.gameEndRequest.serialize(writer));
		if (this.has_quizAnswer) writer.writeMessage(5, this.quizAnswer, () => this.quizAnswer.serialize(writer));
		if (this.has_turnEndNotification)
			writer.writeMessage(6, this.turnEndNotification, () => this.turnEndNotification.serialize(writer));
		if (this.has_otherMessage) writer.writeMessage(7, this.otherMessage, () => this.otherMessage.serialize(writer));
		if (!w) return writer.getResultBuffer();
	}
	static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientMessage {
		const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
			message = new ClientMessage();
		while (reader.nextField()) {
			if (reader.isEndGroup()) break;
			switch (reader.getFieldNumber()) {
				case 1:
					reader.readMessage(
						message.roomJoinRequest,
						() => (message.roomJoinRequest = RoomJoinRequest.deserialize(reader)),
					);
					break;
				case 2:
					reader.readMessage(
						message.roomLeaveRequest,
						() => (message.roomLeaveRequest = RoomLeaveRequest.deserialize(reader)),
					);
					break;
				case 3:
					reader.readMessage(
						message.gameStartRequest,
						() => (message.gameStartRequest = GameStartRequest.deserialize(reader)),
					);
					break;
				case 4:
					reader.readMessage(
						message.gameEndRequest,
						() => (message.gameEndRequest = GameEndRequest.deserialize(reader)),
					);
					break;
				case 5:
					reader.readMessage(message.quizAnswer, () => (message.quizAnswer = QuizAnswer.deserialize(reader)));
					break;
				case 6:
					reader.readMessage(
						message.turnEndNotification,
						() => (message.turnEndNotification = TurnEndNotification.deserialize(reader)),
					);
					break;
				case 7:
					reader.readMessage(message.otherMessage, () => (message.otherMessage = OtherMessage.deserialize(reader)));
					break;
				default:
					reader.skipField();
			}
		}
		return message;
	}
	serializeBinary(): Uint8Array {
		return this.serialize();
	}
	static deserializeBinary(bytes: Uint8Array): ClientMessage {
		return ClientMessage.deserialize(bytes);
	}
}
export class RoomJoinRequest extends pb_1.Message {
	#one_of_decls: number[][] = [];
	constructor(
		data?:
			| any[]
			| {
					type?: string;
					data?: RoomJoinRequest.Data;
			  },
	) {
		super();
		pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
		if (!Array.isArray(data) && typeof data == "object") {
			if ("type" in data && data.type != undefined) {
				this.type = data.type;
			}
			if ("data" in data && data.data != undefined) {
				this.data = data.data;
			}
		}
	}
	get type() {
		return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
	}
	set type(value: string) {
		pb_1.Message.setField(this, 1, value);
	}
	get data() {
		return pb_1.Message.getWrapperField(this, RoomJoinRequest.Data, 2) as RoomJoinRequest.Data;
	}
	set data(value: RoomJoinRequest.Data) {
		pb_1.Message.setWrapperField(this, 2, value);
	}
	get has_data() {
		return pb_1.Message.getField(this, 2) != null;
	}
	static fromObject(data: {
		type?: string;
		data?: ReturnType<typeof RoomJoinRequest.Data.prototype.toObject>;
	}): RoomJoinRequest {
		const message = new RoomJoinRequest({});
		if (data.type != null) {
			message.type = data.type;
		}
		if (data.data != null) {
			message.data = RoomJoinRequest.Data.fromObject(data.data);
		}
		return message;
	}
	toObject() {
		const data: {
			type?: string;
			data?: ReturnType<typeof RoomJoinRequest.Data.prototype.toObject>;
		} = {};
		if (this.type != null) {
			data.type = this.type;
		}
		if (this.data != null) {
			data.data = this.data.toObject();
		}
		return data;
	}
	serialize(): Uint8Array;
	serialize(w: pb_1.BinaryWriter): void;
	serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
		const writer = w || new pb_1.BinaryWriter();
		if (this.type.length) writer.writeString(1, this.type);
		if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
		if (!w) return writer.getResultBuffer();
	}
	static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomJoinRequest {
		const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
			message = new RoomJoinRequest();
		while (reader.nextField()) {
			if (reader.isEndGroup()) break;
			switch (reader.getFieldNumber()) {
				case 1:
					message.type = reader.readString();
					break;
				case 2:
					reader.readMessage(message.data, () => (message.data = RoomJoinRequest.Data.deserialize(reader)));
					break;
				default:
					reader.skipField();
			}
		}
		return message;
	}
	serializeBinary(): Uint8Array {
		return this.serialize();
	}
	static deserializeBinary(bytes: Uint8Array): RoomJoinRequest {
		return RoomJoinRequest.deserialize(bytes);
	}
}
export namespace RoomJoinRequest {
	export class Data extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						playerId?: number;
						roomCode?: string;
				  },
		) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == "object") {
				if ("playerId" in data && data.playerId != undefined) {
					this.playerId = data.playerId;
				}
				if ("roomCode" in data && data.roomCode != undefined) {
					this.roomCode = data.roomCode;
				}
			}
		}
		get playerId() {
			return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
		}
		set playerId(value: number) {
			pb_1.Message.setField(this, 1, value);
		}
		get roomCode() {
			return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
		}
		set roomCode(value: string) {
			pb_1.Message.setField(this, 2, value);
		}
		static fromObject(data: {
			playerId?: number;
			roomCode?: string;
		}): Data {
			const message = new Data({});
			if (data.playerId != null) {
				message.playerId = data.playerId;
			}
			if (data.roomCode != null) {
				message.roomCode = data.roomCode;
			}
			return message;
		}
		toObject() {
			const data: {
				playerId?: number;
				roomCode?: string;
			} = {};
			if (this.playerId != null) {
				data.playerId = this.playerId;
			}
			if (this.roomCode != null) {
				data.roomCode = this.roomCode;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.playerId != 0) writer.writeInt32(1, this.playerId);
			if (this.roomCode.length) writer.writeString(2, this.roomCode);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Data {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new Data();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.playerId = reader.readInt32();
						break;
					case 2:
						message.roomCode = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): Data {
			return Data.deserialize(bytes);
		}
	}
}
export class RoomLeaveRequest extends pb_1.Message {
	#one_of_decls: number[][] = [];
	constructor(
		data?:
			| any[]
			| {
					type?: string;
					data?: RoomLeaveRequest.Data;
			  },
	) {
		super();
		pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
		if (!Array.isArray(data) && typeof data == "object") {
			if ("type" in data && data.type != undefined) {
				this.type = data.type;
			}
			if ("data" in data && data.data != undefined) {
				this.data = data.data;
			}
		}
	}
	get type() {
		return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
	}
	set type(value: string) {
		pb_1.Message.setField(this, 1, value);
	}
	get data() {
		return pb_1.Message.getWrapperField(this, RoomLeaveRequest.Data, 2) as RoomLeaveRequest.Data;
	}
	set data(value: RoomLeaveRequest.Data) {
		pb_1.Message.setWrapperField(this, 2, value);
	}
	get has_data() {
		return pb_1.Message.getField(this, 2) != null;
	}
	static fromObject(data: {
		type?: string;
		data?: ReturnType<typeof RoomLeaveRequest.Data.prototype.toObject>;
	}): RoomLeaveRequest {
		const message = new RoomLeaveRequest({});
		if (data.type != null) {
			message.type = data.type;
		}
		if (data.data != null) {
			message.data = RoomLeaveRequest.Data.fromObject(data.data);
		}
		return message;
	}
	toObject() {
		const data: {
			type?: string;
			data?: ReturnType<typeof RoomLeaveRequest.Data.prototype.toObject>;
		} = {};
		if (this.type != null) {
			data.type = this.type;
		}
		if (this.data != null) {
			data.data = this.data.toObject();
		}
		return data;
	}
	serialize(): Uint8Array;
	serialize(w: pb_1.BinaryWriter): void;
	serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
		const writer = w || new pb_1.BinaryWriter();
		if (this.type.length) writer.writeString(1, this.type);
		if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
		if (!w) return writer.getResultBuffer();
	}
	static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomLeaveRequest {
		const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
			message = new RoomLeaveRequest();
		while (reader.nextField()) {
			if (reader.isEndGroup()) break;
			switch (reader.getFieldNumber()) {
				case 1:
					message.type = reader.readString();
					break;
				case 2:
					reader.readMessage(message.data, () => (message.data = RoomLeaveRequest.Data.deserialize(reader)));
					break;
				default:
					reader.skipField();
			}
		}
		return message;
	}
	serializeBinary(): Uint8Array {
		return this.serialize();
	}
	static deserializeBinary(bytes: Uint8Array): RoomLeaveRequest {
		return RoomLeaveRequest.deserialize(bytes);
	}
}
export namespace RoomLeaveRequest {
	export class Data extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						playerId?: number;
				  },
		) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == "object") {
				if ("playerId" in data && data.playerId != undefined) {
					this.playerId = data.playerId;
				}
			}
		}
		get playerId() {
			return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
		}
		set playerId(value: number) {
			pb_1.Message.setField(this, 1, value);
		}
		static fromObject(data: {
			playerId?: number;
		}): Data {
			const message = new Data({});
			if (data.playerId != null) {
				message.playerId = data.playerId;
			}
			return message;
		}
		toObject() {
			const data: {
				playerId?: number;
			} = {};
			if (this.playerId != null) {
				data.playerId = this.playerId;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.playerId != 0) writer.writeInt32(1, this.playerId);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Data {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new Data();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.playerId = reader.readInt32();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): Data {
			return Data.deserialize(bytes);
		}
	}
}
export class GameStartRequest extends pb_1.Message {
	#one_of_decls: number[][] = [];
	constructor(
		data?:
			| any[]
			| {
					type?: string;
					data?: GameStartRequest.Data;
			  },
	) {
		super();
		pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
		if (!Array.isArray(data) && typeof data == "object") {
			if ("type" in data && data.type != undefined) {
				this.type = data.type;
			}
			if ("data" in data && data.data != undefined) {
				this.data = data.data;
			}
		}
	}
	get type() {
		return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
	}
	set type(value: string) {
		pb_1.Message.setField(this, 1, value);
	}
	get data() {
		return pb_1.Message.getWrapperField(this, GameStartRequest.Data, 2) as GameStartRequest.Data;
	}
	set data(value: GameStartRequest.Data) {
		pb_1.Message.setWrapperField(this, 2, value);
	}
	get has_data() {
		return pb_1.Message.getField(this, 2) != null;
	}
	static fromObject(data: {
		type?: string;
		data?: ReturnType<typeof GameStartRequest.Data.prototype.toObject>;
	}): GameStartRequest {
		const message = new GameStartRequest({});
		if (data.type != null) {
			message.type = data.type;
		}
		if (data.data != null) {
			message.data = GameStartRequest.Data.fromObject(data.data);
		}
		return message;
	}
	toObject() {
		const data: {
			type?: string;
			data?: ReturnType<typeof GameStartRequest.Data.prototype.toObject>;
		} = {};
		if (this.type != null) {
			data.type = this.type;
		}
		if (this.data != null) {
			data.data = this.data.toObject();
		}
		return data;
	}
	serialize(): Uint8Array;
	serialize(w: pb_1.BinaryWriter): void;
	serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
		const writer = w || new pb_1.BinaryWriter();
		if (this.type.length) writer.writeString(1, this.type);
		if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
		if (!w) return writer.getResultBuffer();
	}
	static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameStartRequest {
		const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
			message = new GameStartRequest();
		while (reader.nextField()) {
			if (reader.isEndGroup()) break;
			switch (reader.getFieldNumber()) {
				case 1:
					message.type = reader.readString();
					break;
				case 2:
					reader.readMessage(message.data, () => (message.data = GameStartRequest.Data.deserialize(reader)));
					break;
				default:
					reader.skipField();
			}
		}
		return message;
	}
	serializeBinary(): Uint8Array {
		return this.serialize();
	}
	static deserializeBinary(bytes: Uint8Array): GameStartRequest {
		return GameStartRequest.deserialize(bytes);
	}
}
export namespace GameStartRequest {
	export class Data extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						playerId?: number;
						roomCode?: string;
				  },
		) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == "object") {
				if ("playerId" in data && data.playerId != undefined) {
					this.playerId = data.playerId;
				}
				if ("roomCode" in data && data.roomCode != undefined) {
					this.roomCode = data.roomCode;
				}
			}
		}
		get playerId() {
			return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
		}
		set playerId(value: number) {
			pb_1.Message.setField(this, 1, value);
		}
		get roomCode() {
			return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
		}
		set roomCode(value: string) {
			pb_1.Message.setField(this, 2, value);
		}
		static fromObject(data: {
			playerId?: number;
			roomCode?: string;
		}): Data {
			const message = new Data({});
			if (data.playerId != null) {
				message.playerId = data.playerId;
			}
			if (data.roomCode != null) {
				message.roomCode = data.roomCode;
			}
			return message;
		}
		toObject() {
			const data: {
				playerId?: number;
				roomCode?: string;
			} = {};
			if (this.playerId != null) {
				data.playerId = this.playerId;
			}
			if (this.roomCode != null) {
				data.roomCode = this.roomCode;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.playerId != 0) writer.writeInt32(1, this.playerId);
			if (this.roomCode.length) writer.writeString(2, this.roomCode);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Data {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new Data();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.playerId = reader.readInt32();
						break;
					case 2:
						message.roomCode = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): Data {
			return Data.deserialize(bytes);
		}
	}
}
export class GameEndRequest extends pb_1.Message {
	#one_of_decls: number[][] = [];
	constructor(
		data?:
			| any[]
			| {
					type?: string;
					data?: GameEndRequest.Data;
			  },
	) {
		super();
		pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
		if (!Array.isArray(data) && typeof data == "object") {
			if ("type" in data && data.type != undefined) {
				this.type = data.type;
			}
			if ("data" in data && data.data != undefined) {
				this.data = data.data;
			}
		}
	}
	get type() {
		return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
	}
	set type(value: string) {
		pb_1.Message.setField(this, 1, value);
	}
	get data() {
		return pb_1.Message.getWrapperField(this, GameEndRequest.Data, 2) as GameEndRequest.Data;
	}
	set data(value: GameEndRequest.Data) {
		pb_1.Message.setWrapperField(this, 2, value);
	}
	get has_data() {
		return pb_1.Message.getField(this, 2) != null;
	}
	static fromObject(data: {
		type?: string;
		data?: ReturnType<typeof GameEndRequest.Data.prototype.toObject>;
	}): GameEndRequest {
		const message = new GameEndRequest({});
		if (data.type != null) {
			message.type = data.type;
		}
		if (data.data != null) {
			message.data = GameEndRequest.Data.fromObject(data.data);
		}
		return message;
	}
	toObject() {
		const data: {
			type?: string;
			data?: ReturnType<typeof GameEndRequest.Data.prototype.toObject>;
		} = {};
		if (this.type != null) {
			data.type = this.type;
		}
		if (this.data != null) {
			data.data = this.data.toObject();
		}
		return data;
	}
	serialize(): Uint8Array;
	serialize(w: pb_1.BinaryWriter): void;
	serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
		const writer = w || new pb_1.BinaryWriter();
		if (this.type.length) writer.writeString(1, this.type);
		if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
		if (!w) return writer.getResultBuffer();
	}
	static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameEndRequest {
		const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
			message = new GameEndRequest();
		while (reader.nextField()) {
			if (reader.isEndGroup()) break;
			switch (reader.getFieldNumber()) {
				case 1:
					message.type = reader.readString();
					break;
				case 2:
					reader.readMessage(message.data, () => (message.data = GameEndRequest.Data.deserialize(reader)));
					break;
				default:
					reader.skipField();
			}
		}
		return message;
	}
	serializeBinary(): Uint8Array {
		return this.serialize();
	}
	static deserializeBinary(bytes: Uint8Array): GameEndRequest {
		return GameEndRequest.deserialize(bytes);
	}
}
export namespace GameEndRequest {
	export class Data extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						playerId?: number;
						roomCode?: string;
				  },
		) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == "object") {
				if ("playerId" in data && data.playerId != undefined) {
					this.playerId = data.playerId;
				}
				if ("roomCode" in data && data.roomCode != undefined) {
					this.roomCode = data.roomCode;
				}
			}
		}
		get playerId() {
			return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
		}
		set playerId(value: number) {
			pb_1.Message.setField(this, 1, value);
		}
		get roomCode() {
			return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
		}
		set roomCode(value: string) {
			pb_1.Message.setField(this, 2, value);
		}
		static fromObject(data: {
			playerId?: number;
			roomCode?: string;
		}): Data {
			const message = new Data({});
			if (data.playerId != null) {
				message.playerId = data.playerId;
			}
			if (data.roomCode != null) {
				message.roomCode = data.roomCode;
			}
			return message;
		}
		toObject() {
			const data: {
				playerId?: number;
				roomCode?: string;
			} = {};
			if (this.playerId != null) {
				data.playerId = this.playerId;
			}
			if (this.roomCode != null) {
				data.roomCode = this.roomCode;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.playerId != 0) writer.writeInt32(1, this.playerId);
			if (this.roomCode.length) writer.writeString(2, this.roomCode);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Data {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new Data();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.playerId = reader.readInt32();
						break;
					case 2:
						message.roomCode = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): Data {
			return Data.deserialize(bytes);
		}
	}
}
export class QuizAnswer extends pb_1.Message {
	#one_of_decls: number[][] = [];
	constructor(
		data?:
			| any[]
			| {
					type?: string;
					data?: QuizAnswer.Data;
			  },
	) {
		super();
		pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
		if (!Array.isArray(data) && typeof data == "object") {
			if ("type" in data && data.type != undefined) {
				this.type = data.type;
			}
			if ("data" in data && data.data != undefined) {
				this.data = data.data;
			}
		}
	}
	get type() {
		return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
	}
	set type(value: string) {
		pb_1.Message.setField(this, 1, value);
	}
	get data() {
		return pb_1.Message.getWrapperField(this, QuizAnswer.Data, 2) as QuizAnswer.Data;
	}
	set data(value: QuizAnswer.Data) {
		pb_1.Message.setWrapperField(this, 2, value);
	}
	get has_data() {
		return pb_1.Message.getField(this, 2) != null;
	}
	static fromObject(data: {
		type?: string;
		data?: ReturnType<typeof QuizAnswer.Data.prototype.toObject>;
	}): QuizAnswer {
		const message = new QuizAnswer({});
		if (data.type != null) {
			message.type = data.type;
		}
		if (data.data != null) {
			message.data = QuizAnswer.Data.fromObject(data.data);
		}
		return message;
	}
	toObject() {
		const data: {
			type?: string;
			data?: ReturnType<typeof QuizAnswer.Data.prototype.toObject>;
		} = {};
		if (this.type != null) {
			data.type = this.type;
		}
		if (this.data != null) {
			data.data = this.data.toObject();
		}
		return data;
	}
	serialize(): Uint8Array;
	serialize(w: pb_1.BinaryWriter): void;
	serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
		const writer = w || new pb_1.BinaryWriter();
		if (this.type.length) writer.writeString(1, this.type);
		if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
		if (!w) return writer.getResultBuffer();
	}
	static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuizAnswer {
		const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
			message = new QuizAnswer();
		while (reader.nextField()) {
			if (reader.isEndGroup()) break;
			switch (reader.getFieldNumber()) {
				case 1:
					message.type = reader.readString();
					break;
				case 2:
					reader.readMessage(message.data, () => (message.data = QuizAnswer.Data.deserialize(reader)));
					break;
				default:
					reader.skipField();
			}
		}
		return message;
	}
	serializeBinary(): Uint8Array {
		return this.serialize();
	}
	static deserializeBinary(bytes: Uint8Array): QuizAnswer {
		return QuizAnswer.deserialize(bytes);
	}
}
export namespace QuizAnswer {
	export class Data extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						playerId?: number;
						answer?: string;
				  },
		) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == "object") {
				if ("playerId" in data && data.playerId != undefined) {
					this.playerId = data.playerId;
				}
				if ("answer" in data && data.answer != undefined) {
					this.answer = data.answer;
				}
			}
		}
		get playerId() {
			return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
		}
		set playerId(value: number) {
			pb_1.Message.setField(this, 1, value);
		}
		get answer() {
			return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
		}
		set answer(value: string) {
			pb_1.Message.setField(this, 2, value);
		}
		static fromObject(data: {
			playerId?: number;
			answer?: string;
		}): Data {
			const message = new Data({});
			if (data.playerId != null) {
				message.playerId = data.playerId;
			}
			if (data.answer != null) {
				message.answer = data.answer;
			}
			return message;
		}
		toObject() {
			const data: {
				playerId?: number;
				answer?: string;
			} = {};
			if (this.playerId != null) {
				data.playerId = this.playerId;
			}
			if (this.answer != null) {
				data.answer = this.answer;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.playerId != 0) writer.writeInt32(1, this.playerId);
			if (this.answer.length) writer.writeString(2, this.answer);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Data {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new Data();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.playerId = reader.readInt32();
						break;
					case 2:
						message.answer = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): Data {
			return Data.deserialize(bytes);
		}
	}
}
export class TurnEndNotification extends pb_1.Message {
	#one_of_decls: number[][] = [];
	constructor(
		data?:
			| any[]
			| {
					type?: string;
					data?: TurnEndNotification.Data;
			  },
	) {
		super();
		pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
		if (!Array.isArray(data) && typeof data == "object") {
			if ("type" in data && data.type != undefined) {
				this.type = data.type;
			}
			if ("data" in data && data.data != undefined) {
				this.data = data.data;
			}
		}
	}
	get type() {
		return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
	}
	set type(value: string) {
		pb_1.Message.setField(this, 1, value);
	}
	get data() {
		return pb_1.Message.getWrapperField(this, TurnEndNotification.Data, 2) as TurnEndNotification.Data;
	}
	set data(value: TurnEndNotification.Data) {
		pb_1.Message.setWrapperField(this, 2, value);
	}
	get has_data() {
		return pb_1.Message.getField(this, 2) != null;
	}
	static fromObject(data: {
		type?: string;
		data?: ReturnType<typeof TurnEndNotification.Data.prototype.toObject>;
	}): TurnEndNotification {
		const message = new TurnEndNotification({});
		if (data.type != null) {
			message.type = data.type;
		}
		if (data.data != null) {
			message.data = TurnEndNotification.Data.fromObject(data.data);
		}
		return message;
	}
	toObject() {
		const data: {
			type?: string;
			data?: ReturnType<typeof TurnEndNotification.Data.prototype.toObject>;
		} = {};
		if (this.type != null) {
			data.type = this.type;
		}
		if (this.data != null) {
			data.data = this.data.toObject();
		}
		return data;
	}
	serialize(): Uint8Array;
	serialize(w: pb_1.BinaryWriter): void;
	serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
		const writer = w || new pb_1.BinaryWriter();
		if (this.type.length) writer.writeString(1, this.type);
		if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
		if (!w) return writer.getResultBuffer();
	}
	static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TurnEndNotification {
		const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
			message = new TurnEndNotification();
		while (reader.nextField()) {
			if (reader.isEndGroup()) break;
			switch (reader.getFieldNumber()) {
				case 1:
					message.type = reader.readString();
					break;
				case 2:
					reader.readMessage(message.data, () => (message.data = TurnEndNotification.Data.deserialize(reader)));
					break;
				default:
					reader.skipField();
			}
		}
		return message;
	}
	serializeBinary(): Uint8Array {
		return this.serialize();
	}
	static deserializeBinary(bytes: Uint8Array): TurnEndNotification {
		return TurnEndNotification.deserialize(bytes);
	}
}
export namespace TurnEndNotification {
	export class Data extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						playerId?: number;
				  },
		) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == "object") {
				if ("playerId" in data && data.playerId != undefined) {
					this.playerId = data.playerId;
				}
			}
		}
		get playerId() {
			return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
		}
		set playerId(value: number) {
			pb_1.Message.setField(this, 1, value);
		}
		static fromObject(data: {
			playerId?: number;
		}): Data {
			const message = new Data({});
			if (data.playerId != null) {
				message.playerId = data.playerId;
			}
			return message;
		}
		toObject() {
			const data: {
				playerId?: number;
			} = {};
			if (this.playerId != null) {
				data.playerId = this.playerId;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.playerId != 0) writer.writeInt32(1, this.playerId);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Data {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new Data();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.playerId = reader.readInt32();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): Data {
			return Data.deserialize(bytes);
		}
	}
}
export class OtherMessage extends pb_1.Message {
	#one_of_decls: number[][] = [];
	constructor(
		data?:
			| any[]
			| {
					type?: string;
					data?: OtherMessage.Data;
			  },
	) {
		super();
		pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
		if (!Array.isArray(data) && typeof data == "object") {
			if ("type" in data && data.type != undefined) {
				this.type = data.type;
			}
			if ("data" in data && data.data != undefined) {
				this.data = data.data;
			}
		}
	}
	get type() {
		return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
	}
	set type(value: string) {
		pb_1.Message.setField(this, 1, value);
	}
	get data() {
		return pb_1.Message.getWrapperField(this, OtherMessage.Data, 2) as OtherMessage.Data;
	}
	set data(value: OtherMessage.Data) {
		pb_1.Message.setWrapperField(this, 2, value);
	}
	get has_data() {
		return pb_1.Message.getField(this, 2) != null;
	}
	static fromObject(data: {
		type?: string;
		data?: ReturnType<typeof OtherMessage.Data.prototype.toObject>;
	}): OtherMessage {
		const message = new OtherMessage({});
		if (data.type != null) {
			message.type = data.type;
		}
		if (data.data != null) {
			message.data = OtherMessage.Data.fromObject(data.data);
		}
		return message;
	}
	toObject() {
		const data: {
			type?: string;
			data?: ReturnType<typeof OtherMessage.Data.prototype.toObject>;
		} = {};
		if (this.type != null) {
			data.type = this.type;
		}
		if (this.data != null) {
			data.data = this.data.toObject();
		}
		return data;
	}
	serialize(): Uint8Array;
	serialize(w: pb_1.BinaryWriter): void;
	serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
		const writer = w || new pb_1.BinaryWriter();
		if (this.type.length) writer.writeString(1, this.type);
		if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
		if (!w) return writer.getResultBuffer();
	}
	static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OtherMessage {
		const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
			message = new OtherMessage();
		while (reader.nextField()) {
			if (reader.isEndGroup()) break;
			switch (reader.getFieldNumber()) {
				case 1:
					message.type = reader.readString();
					break;
				case 2:
					reader.readMessage(message.data, () => (message.data = OtherMessage.Data.deserialize(reader)));
					break;
				default:
					reader.skipField();
			}
		}
		return message;
	}
	serializeBinary(): Uint8Array {
		return this.serialize();
	}
	static deserializeBinary(bytes: Uint8Array): OtherMessage {
		return OtherMessage.deserialize(bytes);
	}
}
export namespace OtherMessage {
	export class Data extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						playerId?: number;
						message?: string;
				  },
		) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == "object") {
				if ("playerId" in data && data.playerId != undefined) {
					this.playerId = data.playerId;
				}
				if ("message" in data && data.message != undefined) {
					this.message = data.message;
				}
			}
		}
		get playerId() {
			return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
		}
		set playerId(value: number) {
			pb_1.Message.setField(this, 1, value);
		}
		get message() {
			return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
		}
		set message(value: string) {
			pb_1.Message.setField(this, 2, value);
		}
		static fromObject(data: {
			playerId?: number;
			message?: string;
		}): Data {
			const message = new Data({});
			if (data.playerId != null) {
				message.playerId = data.playerId;
			}
			if (data.message != null) {
				message.message = data.message;
			}
			return message;
		}
		toObject() {
			const data: {
				playerId?: number;
				message?: string;
			} = {};
			if (this.playerId != null) {
				data.playerId = this.playerId;
			}
			if (this.message != null) {
				data.message = this.message;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.playerId != 0) writer.writeInt32(1, this.playerId);
			if (this.message.length) writer.writeString(2, this.message);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Data {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new Data();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.playerId = reader.readInt32();
						break;
					case 2:
						message.message = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): Data {
			return Data.deserialize(bytes);
		}
	}
}
